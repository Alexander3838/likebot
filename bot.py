from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from config import TOKEN, ADMIN_ID
from keep_alive import keep_alive
import re, time

users = {}
queue = []
liked = {}

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = [
        [KeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")],
        [KeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫–∏")],
        [KeyboardButton("üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"), KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    context.bot.send_message(chat_id=update.effective_chat.id, text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá", reply_markup=reply_markup)
    users[user.id] = {"videos": [], "likes_given": [], "likes_received": 0}

def is_tiktok_link(text):
    return "tiktok.com" in text

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "üìú –ü—Ä–∞–≤–∏–ª–∞":
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n\n1. –î–æ–±–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ TikTok-—Å—Å—ã–ª–∫–∏\n2. –õ–∞–π–∫–∞–π 3 –≤–∏–¥–µ–æ ‚Äî –ø–æ–ª—É—á–∞–π –ª–∞–π–∫–∏ –Ω–∞ —Å–≤–æ—ë\n3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ 20 —Å–µ–∫—É–Ω–¥\n4. –ù–µ –∂—É–ª—å–Ω–∏—á–∞–π üòâ",
            parse_mode="HTML"
        )
    elif text == "üîó –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
        context.bot.send_message(chat_id=update.effective_chat.id, text="üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—ë –≤–∏–¥–µ–æ —Å TikTok")
    elif is_tiktok_link(text):
        if text in [v for _, v in queue]:
            context.bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è –≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")
            return
        if user_id not in users:
            users[user_id] = {"videos": [], "likes_given": [], "likes_received": 0}
        users[user_id]["videos"].append(text)
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!")
    elif text == "üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è":
        tasks = []
        for uid, link in queue:
            if uid == user_id or link in users.get(user_id, {}).get("likes_given", []):
                continue
            tasks.append(link)
            if len(tasks) == 3:
                break
        if not tasks:
            context.bot.send_message(chat_id=update.effective_chat.id, text="üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        else:
            if user_id not in users:
                users[user_id] = {"videos": [], "likes_given": [], "likes_received": 0}
            users[user_id]["current_tasks"] = tasks
            users[user_id]["task_time"] = time.time()
            msg = "\n".join([f"üîó {t}" for t in tasks])
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"üëç –õ–∞–π–∫–Ω–∏ —ç—Ç–∏ –≤–∏–¥–µ–æ:\n{msg}\n\n‚è≥ –ß–µ—Ä–µ–∑ 20 —Å–µ–∫. –Ω–∞–∂–º–∏ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫–∏'")
    elif text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫–∏":
        now = time.time()
        if user_id not in users or "task_time" not in users[user_id] or now - users[user_id]["task_time"] < 20:
            context.bot.send_message(chat_id=update.effective_chat.id, text="‚è± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.")
            return
        for link in users[user_id]["current_tasks"]:
            users[user_id]["likes_given"].append(link)
        if user_id in users and users[user_id]["videos"]:
            queue.append((user_id, users[user_id]["videos"][-1]))
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—ë –≤–∏–¥–µ–æ –ø–æ–ª—É—á–∏—Ç –ª–∞–π–∫–∏.")
    elif text == "üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        top = sorted(users.items(), key=lambda x: len(x[1].get('likes_given', [])), reverse=True)
        msg = "üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
        for i, (uid, data) in enumerate(top[:5], start=1):
            msg += f"{i}. ID {uid} ‚Äî üëç {len(data['likes_given'])} –ª–∞–π–∫–æ–≤\n"
        context.bot.send_message(chat_id=update.effective_chat.id, text=msg, parse_mode="HTML")
    elif text == "/admin" and user_id == ADMIN_ID:
        if not queue:
            context.bot.send_message(chat_id=update.effective_chat.id, text="üßπ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        else:
            msg = "\n".join([f"{i+1}. {l}" for i, (uid, l) in enumerate(queue)])
            context.bot.send_message(chat_id=update.effective_chat.id, text=f"üìù –û—á–µ—Ä–µ–¥—å:\n{msg}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def main():
    keep_alive()
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("admin", handle_message))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()/a
